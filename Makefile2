
CC := $(CXX) #g++
LD := $(CXX) #g++

#OPENCV_LIB=/efs/tools/OpenCV3/lib/
#OPENCV_INCLUDE=/efs/tools/OpenCV3/include/
#OPENCV_INCLUDE=/home/armafire/tools/opencv-3-install-test/include/
#OPENCV_LIB=/home/armafire/tools/opencv-3-install-test/lib/

#=======
#OPENCV_ROOT=/efs/home/lemon510/cv
OPENCV_INCLUDE=$(OPENCV_ROOT)/include
OPENCV_LIB=$(OPENCV_ROOT)/lib
#>>>>>>> 84dd39cb1a6e33998c46f5e549f732adc98b358f

#CFLAGS += -fcilkplus -m64 -ffast-math -mfma
CFLAGS += -std=c++11 $(EXTRA_CFLAGS) -m64 -march=native -pthread -I/efs/home/wheatman/install_dir/protobufs/include
#CFLAGS += -Wall
#-Winline
CFLAGS += -I$(OPENCV_INCLUDE)
LDFLAGS = $(EXTRA_LDFLAGS) -L/efs/home/wheatman/install_dir/protobufs/lib -lprotobuf -lpthread

ifdef PROFILE
  CFLAGS += -DPROFILE
  LDFLAGS += -lprofiler
endif

ifdef NOCACHE
  CFLAGS += -DNOCACHE
endif

ifdef 3D
  CFLAGS += -DALIGN3D
endif

ifdef SKIPOUTPUT
  CFLAGS += -DSKIPOUTPUT
endif

ifdef LOGIMAGES
  CFLAGS += -DLOGIMAGES
endif

ifndef INCLUDEHDF5
  CFLAGS += -DSKIPHDF5
endif

ifdef MEMCHECK
  CFLAGS += -DMEMCHECK
endif

ifndef INCLUDEJSON
  CFLAGS += -DSKIPJSON
endif

ifeq ($(CILKSAN),1)
CFLAGS += -fsanitize=cilk
#LDFLAGS += -fsanitize=cilk
endif


ifdef ASSEMBLY
	CFLAGS += -S
endif

ifdef DEBUG
	CFLAGS += -O0 -g
else
	CFLAGS += -DNDEBUG
	CFLAGS += -O3 -g -mavx2 -m64 -march=native
	#-Ofast
endif

LDFLAGS += -L$(OPENCV_LIB) -lcilkrts -lopencv_imgcodecs -lopencv_core -lopencv_imgproc -lopencv_features2d -lopencv_xfeatures2d -lopencv_flann -lopencv_video -lopencv_videostab -lopencv_calib3d -lopencv_hdf -lhdf5_hl -lhdf5
#LDFLAGS += -L$(OPENCV_LIB) -lcilkrts -lopencv_imgcodecs -lopencv_core -lopencv_imgproc -lopencv_features2d -lopencv_xfeatures2d -lopencv_video -lopencv_videostab -lopencv_calib3d -lhdf5 -lgomp


ifdef ASSEMBLY
	BINS = common.S align.S run.S
else
	BINS = run_align
endif

.PHONY:	all clean

all: $(BINS)

#img_io.o: ezsift/img_io.cpp
#	$(CC) $(CFLAGS) $(DEFINES) -c -o $@ $<
#
#img_io.S: ezsift/img_io.cpp
#	$(CC) $(CFLAGS) $(DEFINES) -c -o $@ $<
#
#ezsift.o: ezsift/ezsift.cpp
#	$(CC) $(CFLAGS) $(DEFINES) -c -o $@ $<
#
#ezsift.S: ezsift/ezsift.cpp
#	$(CC) $(CFLAGS) $(DEFINES) -c -o $@ $<

common.o: common.cpp
	$(CC) $(CFLAGS) $(DEFINES) -c -o $@ $<

common.S: common.cpp
	$(CC) $(CFLAGS) $(DEFINES) -c -o $@ $<

match.o: match.cpp meshoptimize.h ransac.h
	$(CC) $(CFLAGS) $(DEFINES) -c -o $@ $<

align.o: align.cpp othersift2.cpp
	$(CC) $(CFLAGS) $(DEFINES) -c -o $@ $<

align.S: align.cpp othersift2.cpp
	$(CC) $(CFLAGS) $(DEFINES) -c -o $@ $<

run.o: run.cpp
	$(CC) $(CFLAGS) $(DEFINES) -c -o $@ $<

#engine.o: cilk_tools/engine.cpp cilk_tools/scheduler.cpp cilk_tools/Graph.cpp
#	$(CC) $(CFLAGS) $(DEFINES) -c -o $@ $<


#engine.o: cilk_tools/Graph.cpp cilk_tools/engine.cpp cilk_tools/scheduler.cpp
#	$(CC) $(CFLAGS) $(DEFINES) -c -o $@ $<



#
#Graph.o: Graph.cpp Graph.h
#	$(CC) $(CFLAGS) $(DEFINES) -c -o $@ $<    	
run.S: run.cpp
	$(CC) $(CFLAGS) $(DEFINES) -c -o $@ $<    	

run_align: common.o align.o run.o match.o
	$(LD) -o $@ $^ $(LDFLAGS)

clean:
	rm -f $(BINS) *.o
